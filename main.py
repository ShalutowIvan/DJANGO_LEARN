# посмотреть дударя уроки по джанго, там вроде тоже норм
#1. Django - что это такое, порядок установки | Django уроки!!!!!!!!!!!!!!!!!
# Установка джанго
# устанавливаем виртуальное окружение
# python -m venv venv
#второй venv это имя виртуального окружения. В него будут ставиться все модули
# активируем его, для винды:
# .\venv\Scripts\activate
# После активации мы как бы войдем в виртуальное окружение и далее все установки будут в это виртальное окружение
# Для линукс активация
# source venv/bin/activate
# чтобы выйти из виртуального окружения пишем:
# deactivate
#после этого все модули будут тянуться из глобального окружения компа
# в пайчарме тоже можно указать виртуальное окружение. Через файл сеттингс
# с помощью ядра можно создавать сайты в рамках текущего окружения
# команда для список команд ядра:
# django-admin
# команда создания проекта первого сайта:
# django-admin startproject <имя сайта>
# имя сайта обычно совпадает с именем домена на котором располагается сайт. Сайт это как бы проект, в котором будет несколько приложений джанго.
# будет создана папка с именем которое мы напишем, в ней будет еще одна папка с таким же названием, это вложенная папка это пакет конфигурации сайта. В ней есть несколько файлов с конфигурациями, это пакет конфигурации с файлом __init__.py, то есть пакетная папка
# также в корне папки будет файл manage.py через него производится управление сайтом. ПО факту это утилита которая передает команды в django-admin и выполняет их от лица нашего сайта
# команда для запуска сервера из консоли из папки с имененем сайта:
# python manage.py runserver
#виртуальное окружение должно быть активировано
# чтобы остановить сервер нужно нажать CTRL+C
# он автоматом перезапускается когда что то редактируем в коде проекта. Но если изменения не происходят, то можно руками перезапустить вебсервер, то есть выключить и включить
#также при первом запуске у нас появится файл базы данных sqlite3. Эту СУБД джанго использует по умолчанию. Но можно подключать и другие
# также можно для запуска указывать свой порт. для этого пишем команду в консоли:
# python manage.py runserver <номер порта>
# или можно указать IP, тогда будет указан другой IP не стандартный. На локальном пк может не сработать
# python manage.py runserver IP:port

#2. Модель MTV. Маршрутизация. Функции представления | Django уроки!!!!!!!!!
# запрос пользователя -> маршрутизация по URL то есть ссылка -> ищет совпадение адреса -> активируется представление запроса, если ни один из шаблонов(шаблон это ссылка на страницу сайта, представление это вобщем отображение сайта) не совпадает то генерируется ошибка 404 (хотя мне кажется поиск гугл откроется) -> 
# как работает представление: берет некий шаблон то есть сам html шаблон (Templates), наполняет страницу данными из БД это модель данных(models), данные из БД это называется моделью. Далее результат отдается пользователю(views). То есть html наполненная данными из БД отображается пользователю в виде представления страницы.
# Такая модель называется MTV - model templates views это такой паттерн. Джанго использует этот паттерн MTV. Тут можно все функции делать отдельно
# структура сайта
# Сайт:
# Основное приложение
# Форум
# Опросник
# .....
# каждая часть сайта это отдельное приложение, они должны быть не зависимы друг от друга, чтобы можно было использовать в другом проекте
# создание приложения через консоль
# python manage.py startapp <имя приложения>
# будет создана папка с файлами в виде пакета в проекте. То есть каждое приложение в джанго это пакет
# состав пакета:
# - папка migrations для хранения миграций БД приложения
# admin.py для связи с админ панелью сайта. Админ панель поставляется вместе с джанго и каждый сайт может ее использовать
# apps.py - небходим для настройки и конфигурации текущего приложения
# models.py для хранения ОРМ моделей, для представления данных из Бд
# test.py это модуль с тестирующими процедурами
# views.py для хранения представлений или контроллеров текущего приложения. По сути как бы ссылки сайта нашего.
# приложение создали. Далее нужно зарегистрировать его в проекте нашего сайта, чтобы фреймворк джанго знал о его существовании. Для этого нужно войти в settings.py в папке с проектом
# регистрация приложения в джанго !!!
# заходим в файл settings.py в папке с проектом
# в файле ищем список INSTALLED_APPS. В нем прописаны все приложения, которые инсталированы в нашем пакете. В этот список нужно дописат название нашего приложения, то есть название файла без расширения в кавычках
# по факту джанго после добавления нашего приложения при запуске обращается к файлу apps.py и обращается к классу HomeConfig. Название класса состоит из названия приложения и слова Config. Поэтому в список в файле settings.py лучше добавить полный путь классу (в нашем случае это home.apps.HomeConfig).
# Сделаем обработчик главной страницы сайта. Нужно сделать представление - views. Они могут быть или в виде функций или в виде файлов
# Все представления находятся в файле views.py в папке с нашим приложением то есть в пакете приложения. Там прописываются классы и функции. Продолжение в этом файле....

# в папке с проектом пишется в файле urls.py ссылка на домашнюю страницу сайта, то есть стартовую, а в файле urls.py из папки с приложением пишутся маршруты для приложений

# типы данных в джанго для УРЛ
# str - любая не пустая строка, исключая символ "/"
# int - любое положительное число включая 0
# slug - слаг, то есть латиница ASCII таблицы символы дефиса и подчеркивания
# uuid - цифры, малые латинские символы ASCII, дефис
# path - любая не пустая строка включая символ "/"
# остановился на 5 мин, видео 3
# еще можно использовать регулярные выражения для указания path для url. Функция называется re_path()

# Маршрутизация, обработка исключений запросов, перенаправления | Django уроки!!!!!!!!!!!!!!!!
# структура урл адреса может содержать параметры:
# ?имя параметра то есть ключ=значение&ключ=значение и тд
# до записи выше также может идти префикс, и потом пары ключей и значений
# например:
# http://127.0.0.1:8000/?name=Gagarina&cat=music
# это пример GET запроса
# обратиться к параметрам GET запроса можно через request.GET это специальный словарь в котором сохраняются все эти данные
# исключения при входе на несуществую страницу можно посмотреть в файле settings.py. Далее там записи

# есть еще редиректы 
# 301 - страница перемещена на другой постоянный URL-адрес
# 302 - страница перемещена временно другой URL-адрес
# редиректы нужно писать тоже в представления views


#4. Определение моделей. Миграции: создание и выполнение | Django уроки
#модели отвечают за хранение о оперирование данными сайта. Для этого используют разные СУБД. СУБД можно будет потом поменять. Чтобы можно было свободно работать с любой СУБД в джанго есть технология ORM. WSGI приложение на джанго через апи интерфейс общается с любой СУБД. Программный код в джанго не будет зависеть от СУБД. Также не нужно беспокоиться о подключении к БД и закрытии подключения. Нам нужно только работать с этим кодом системы ORM, записывать и считывать данные из БД. По умолчанию джанго сконфигурирован для SQLITE. Начнем с него. НАстройка СУБД (в нашем сулчае SQLITE3)находится в файле settings.py в папке с проектом, там есть словарь DATABASES в нем настройка подключения СУБД. Если нужна другая СУБД, то нужно будет изменить этот словарь. Главное иметь драйвер для СУБд. Для просмотра БД sqlite можно скачать программу SQLiteStudio. (скачать можно тут: https://sqlitestudio.pl/). Достаточно скачать архив с программой, распаковать и запустить ярлык. В программе можно открыть файл БД sqlite и просмотреть таблицы из него. Теперь будет создавать БД в джанго. 
#Создание таблицы в БД. Чтобы в БД появилась таблиица нужно создать класс с нужными полями и сделать миграцию. Класс с моделями БД нужно писать в файле models.py в папке с нашим приложением. 

#5. CRUD - основы ORM по работе с моделями | Django уроки
#Create - Создание
#Read - чтение
#Update - обновление
#Delete - удаление
#С помощью ORM фреймворка джанго можно делать все эти операции. SQL запросы не нужно юзать, так как мы можем с помощью ORM делать все эти операции. И это можно делать с любой СУБД. Также ORM хорошо оптимизирует запросы по скорости выполнения и частоте обращений к таблицам. Также обеспечивает защиту от SQL инъекций. Из-за этого даже начинающий программист может сделать грамотный код по работе с БД. То есть даже новичку можно сделать крутой проект.
#Каждый объект класса Home представляет собой одну запись в БД home_home. То есть 1 строка в БД home_home это объект класса Home.
# команда для консоли для перехода в консоль джанго:
#python manage.py shell
#Можно импортировать туда класс Home (from home.models import Home). Потом можно создать там объект: Home(title='Мой дом', content='Описание дома'). Указали в нем только 2 параметра, другие создадутся автоматически, кроме photo, с ним потом разберемся. Но после создания объекта запись в БД не появится. Модели в джанго являются ленивыми, то есть создание объекта еще не означает добавление записи в таблицу. То есть запись в БД можно сделать потом. А изначально все оптимизировать все запросы SQL. Но теперь в интерактивном режиме можем сохранить запись в БД. Для этого сначала сохранить наш объект в переменную. Для можно написать так: w1 = _ . Символ _ означает последнее действие.
#Чтобы сохранить данные в таблицу теперь можно написать следующую команду в консоли: w1.save()
#теперь у нас в БД будет 1 строка с нашими значениями.
#<Home: Home object (None)> в этой записи None означает id записи. Также в консоли можно вывести запись из БД если написать w1, вместо None будет тепеь цирфа 1 и в консоли вывдетеся строка из таблицы. Потому что теперь id этой записи равна 1. То есть после добавления в таблицу это значение не равно None. Через эту переменную w1 также можно оперировать всеми значениями этой записи. Например напишем w1.id и выведется id записи, или w1.title будет выведен заголовок и тд. Также есть еще один атрибут называется pk, вызвать его можно также w1.pk, этот атрибут совпадает со значением id, то есть это как бы его синоним. Но в джанго его определили для связи между таблицами, он означает номер текущей записи. Это как бы идентификатор записи.
#Посмотрим как выглядел sql запрос для добавления записи. Для этого импортируем from django.db import connection, потом вызовем connection.queries. Это все в интерактивной консоли. Выведется следующее:
# [{'sql': 'INSERT INTO "home_home" ("title", "content", "photo", "time_create", "time_update", "is_published") VALUES (\'Мой дом\', \'Описание дома\', \'\', \'2023-07-08 14:28:49.965822\', \'2023-07-08 14:28:49.965822\', 1) RETURNING "home_home"."id"', 'time': '0.000'}]
#создадим еще один экземпляр w2. w2 = Home(title = 'Пентхаус', content = 'Огромный дом'). Потом сохраним в БД w2.save(). Теперь при запросе connection.queries будет уже 2 записи. Потом можно также создать и пустой объект w3 например. А данные в нем указать позже обратившись в свойствам объекта, например w3.title = "Белый дом", и потом когда нужную инфу присвоим потом только сохранить ее w3.save().
#каждый класс модели содержит специальный статический объект objects. Этот объект берется из базового класса модели model и представляет собой ссылку на специальный класс Manager. В этом легко убедиться, если выполнить строчку: Home.objects
# Выведется строка: <django.db.models.manager.Manager object at 0x000002C049EB7110> это ссылка на класс Manager
#его называют менеджером записей. У него есть несколько полезных методов
# например создание объекта: w4 = Home.objects.create(title = 'Дом улей', content = 'Тут пчелы')
#отличие такого создания объекта в том, что запись сразу попадает в БД, то есть сразу сохраняется в БД. Далее все тоже самое также можно обращаться к любому полю объекта.
#w4.title и тд
#также такие объекты можно создавать и без переменных и они тоже сразу будут записываться в БД со следующим номером id
#это было создание записей
#теперь чтение записей!!!!
#Метод Home.objects.all() выводит все записи из таблицы. Выведется это:
# <QuerySet [<Home: Home object (1)>, <Home: Home object (2)>, <Home: Home object (3)>, <Home: Home object (4)>, <Home: Home object (5)>]>
#все 5 записей с идентификаторами. Если нам нужно вывести вместо слова Home object например заголовки, то нужно прописать в файле models.py магич метод __str__ и переопределить вывод. После изменения в проекте из интерактивной оболочки нужно выйти и зайти.
# Теперь будет выведено это: <QuerySet [<Home: Мой дом>, <Home: Пентхаус>, <Home: Белый дом>, <Home: Дом улей>, <Home: Проклятый старый дом>]> теперь названия домов - заголовки
#чтобы отдельные элементы вывести можно обращаться к этим элементам по индексу, присвоив этот список в переменную. Также такой список можно и перебрать. Но с точки зрения производительсноти всю базу сохранять в список это большая нагрузка на систему и процессор, поэтому лучше использовать методы обращения к отдельным позициям. Например метод filter. Home.objects.filter(title="Мой дом"). Будет найдена 1 запись: <QuerySet [<Home: Мой дом>]>
#посмотрим sql запрос по этой операции. Импортируем from django.db import connection, потом обратимя к коллекции connection.queries
#там будет список запросов. Наш запрос был такой:  {'sql': 'SELECT "home_home"."id", "home_home"."title", "home_home"."content", "home_home"."photo", "home_home"."time_create", "home_home"."time_update", "home_home"."is_published" FROM "home_home" WHERE "home_home"."title" = \'Мой дом\' LIMIT 21', 'time': '0.000'}
#в нем указан фильтр по названию дома в поле title. То есть метод filter содержит такой sql запрос. Если не будет такой записи, то будет пустой список. Если указать несуществующее значение, то будет пустой список. Строгое равенство срабатывает, а например если нужен id больше 2 знак > не сработает, будет ошибка. Вместо знака < или > в джанго используются суффиксы __gte это >= и __lte <=. То есть пишем название переменной слитно с переменной суффикс потом = значение. Например: Home.objects.filter(pk__gte=2)
#выведутся записи у которых id больше или равен 2
#метод exclude выбирает все записи, которые не соответсвуют критерию. Пример: Home.objects.exclude(pk=2) . Выведутся все записи у которых pk не равны 2.
#Также если нужно выбрать только одну запись по какому-то одному условию, лучше использовать метод get. Пример Home.objects.get(pk=2). Различие в том, что этот метод выводит только одну запись, несколько он не может вывести если мы например пропишем условие при котором должно быть больше одной записи то будет сгенерировано исключение, и если запись не будет найдена то тоже сгенерируется исключение. То есть при использовании метода get мы уверены что в таблице была только одна запись и других записей нет. Это полезно при авторизации пользователя, когда нам нужно найти одну уникальную запись и никакую другую, тут метод get незаменим.
# Если нужна сортировка, то можно прописать метод: Home.objects.filter(pk__lte=4).order_by('title') - тут мы берем все ключи у которых id меньше ли равен 4 и сортировка по полю title. В таком запросе будет всего 1 sql запрос, и мы лишний раз не нагружаем СУБД. Можно и просто отсортировать их по алфавиту: Home.objects.order_by('title')
#можно и по времени создания сортировать: Home.objects.order_by('-time_update') - это сортировка по времени создания в обратном порядке (по убыванию) так как мы поставили знак -
#без минуса сортивка будет в порядке возрастания
#изменение записи!!!!!!
#можно прочитать запись из таблицы, записать ее в переменную. Потом через эту переменную обратиться к полю этой записи и присвоить ей другое значение.
# Пример: wu = Home.objects.get(pk=2)
#wu.title = 'Дом палатка'
#wu.content = 'уютный'
# wu.save() - после изменений в этом случае нужно сохранить, без этого не будет изменений
#смотрим какой запрос был выполнен: connection.queries
#этот запрос: {'sql': 'UPDATE "home_home" SET "title" = \'Дом палатка\', "content" = \'уютный\', "photo" = \'\', "time_create" = \'2023-07-08 15:34:28.174021\', "time_update" = \'2023-07-08 17:38:59.068638\', "is_published" = 1 WHERE "home_home"."id" = 2', 'time': '0.125'}
# Удаление записей!!!!!!!!
# сначала нужно выбрать те записи, что мы собираемся удалить, например, вот так:
#wd = Home.objects.filter(pk__gte=4) выделили записи которые хотим удалить, можно и 1 выделить но выделили 2, те у которых pk больше или равен 4.
# А, затем, выполняем для них метод delete():
# wd.delete() пишем название объекта и название метода

#6. Шаблоны (templates). Начало | Django уроки
#Шаблоны - это шаблоны html страниц, в джанго есть специальный инструмент для страниц. Шаблоны в джанго похожи на шаблоны в Jinja2. Предположим что мы сделаем шаблон для главной страницы который будет храниться в файле index.html
#В файл views.py который находится в папке с приложением нужно импортировать функцию render. Там она уже есть по умолчанию. Она произвродит обработку наших шаблонов

#7. Подключение статических файлов. Фильтры шаблонов | Django уроки
#статические файлы это CSS Javascript и тд. Есть 2 режима: режим отладки и режим эксплуатации на реальном вебсервере. В режиме отладки джанго ищет во всех подкаталогах static приложения и проекта. Если таких папок несколько, то они будут искать во всех таких папках, также поиск будет происходить и в нестандартных папках. Но в режиме реального вебсервера файлы будут браться из папки static всего проекта, то есть из одной папки static которая будет в корне проекта. При сборке проекта все файлы из всех папок с названием static перемещаются в общую папку static в корневом каталоге проекта и потом они все начинают работать из этой папки. ПРи подготовке проекта к эксплуатации выплняется специальная команда: python manage.py collectstatic, после выполнения этой команды все папки перебираются и из них берутся собираются все файлы которые в них находятся и перемещаются в общую папку static. Потом из нее будут браться все наши статические файлы.
#Чтобы все это работало в пакете конфигурации (файл settings.py в папке с проектом) нужно определить 3 константы:
#STATIC_URL - префикс URL-адреса для статических файлов.
#STATIC_ROOT - путь к общей статической папке, используемой реальным веб-сервером. Это будет скорее всего после сборки проекта.
#STATICFILES_DIRS - список дополнительных (нестандартных) путей к статическим файлам, используемых для сбора и для режима отладки. Это если статические файлы будут находиться в нестантартном месте, например в другом каталоге или пакете с проектом, такое может быть в режиме отладки, но и в боевом режиме тоже. 
#Далее идем в файл settings.py
#также создаим папку static в папке с приложением и в ней подкаталог home, чтобы не было конфликта имен. Джанго найдет первый подходящий файл и будет его юзать на нем остановится, для этого мы и используем подкаталог, это как бы пространство имен. В этой папке home нужно еще создать подкаталоги js и css и images для джаваскрипта и css стилей и изображений. Далее создадим файл styles.css, туда напишем стили, которые нам нужны, их можно потом изучить. Также в папку images копируем изображения. Тепеь эти файлы можно юзать в нашем проекте. Чтобы использовать эти файлы можно в базовом шаблоне прописать подключение статических файлов. Идем в файл base.html.
# {% load static %}
# тег load служит для подключения статических файлов к нашему шаблону
#скопировали стили с гитхаба и также базовый шаблон html тоже скопировал, там подключаются стили и перебираем список menu через код шаблонизатора джанго. Меню перебирается в блоке menu. Меню пока без ссылок. Далее также скопировал с гитхаба файл index.html, там к базовой странице есть заполняется страница с контентом. 
#также есть еще сайт https://getbootstrap.com/ там можно брать разные стили для html. Также можно и другие юзать, но бутстрап наиболее популярный. 
# Текст можно разбивать на абзацы. В джанго есть функционал для работы с информацией которая поступает в шаблоны. 
#тут:
# https://djbook.ru/rel3.0/ref/templates/builtins.html#ref-templates-builtins-filters 
# есть русскоязычная документация по джанго
# тут
# https://docs.djangoproject.com/en/4.2/
# англоязычная
#в джанго есть встроенные фильтры в шаблонизаторе. В документации есть их описание. Например для суммирования числе и тд. Например если в тексте есть пустая строка после строки с текстом из базы, то джанго может делать абзац, то есть отступ. Фильтр для абзаца называется linebreaks пишется он через | после строки точнее после переменной в цикле, далее можно и добавлять и другие фильтры через |. truncatewords Скрывает лишние символы и можно задать нудное колво символов, чтобы все прочитать можно нажать кнопку "читать пост", кнопка пока не работает. В документации есть и другие фильтры, можно их там смотреть и юзать.
# Также в джанго есть экранирование тегов, то есть если в контенте который мы считываем из БД будут какие-то теги, то они не сработают и выведутся как текст на странице. Также и не сработает и текст script, это полезно для безопасности в случае угроз атак разных. 
#За экранирование отвечает тег autoescape если после него написано on ({% autoescape on %}) , значит экранирование включено, если of то выключено. Также его нужно закрывать {% endautoescape %}

#8. Формирование URL-адресов в шаблонах | Django уроки
# Так пишется в шаблонизаторе конструкции:
# {% имя_тега %}	{{ имя_переменной }}	{{value|имя_фильтра}}
#как правильно указать url адрес. Идет тег url потом урл адрес или имя маршрута и потом параметры ссылки:
# {% url '<URL-адрес или имя маргрута>' [параметры ссылки] %}
# чтобы прописать ссылку нужно в шаблоне html написать ссылку на страницу, например просто слеш:
# <li class="logo"><a href="/"><div class="logo"></div></a></li>
# но лучше прописывать имя шаблона из файла urls.py в папке с нашим приложением, так как url главной страницы не обязательно должен совпадать с доменным именем. Лучше использовать имена маршрутов
#у нас там уже шаблон прописан с имененм home, им воспользуемся. Пропишем в html это:
# <li class="logo"><a href="{% url 'home' %}"><div class="logo"></div></a></li>
# получается пишем в скобках url и имя шаблона. 
#далее добавляем ссылки к пунктам "о сайте", добавить статью, обратная связь, это меню сверху. 
#далее в файле views нужно прописать список словарей для ссылок. 
# menu = [{'title': "О сайте", "url_name": "about"},
# {'title': "Добавить статью", "url_name": "add_page"},
# {'title': "Обратная связь", "url_name": "contact"},
# {'title': "Войти", "url_name": "login"}
# ]
#пропишем это меню, потом его переберем в base.html и получается мы будем перебирать элементы словаря и это будут ссылки, там по элементы словаря url_name будут браться поля и подставляться.
#потом пропишем ссылки для кнопок читать пост. В файле urls.py пропишем маршрут: path('post/<int:postid>/', show_post, name='post')
#где 'post/<int:postid>/' это ссылка, в которой post это текст, а  <int:postid> это какая либо цифра типа номер страницы. Также вместо цифр можно использовать и slag (буквы), но пока так укажем просто цифры. Также в файле views.py пропишем функцию show_post, с функцией заглушки. И далее в файле index.html пропишем шаблон {% url 'post' p.pk %} в цикле. pk это здесь будет идентификатор записи БД, то есть мы модель БД прописали в файле models.py. В этой записи будет взята функция для шаблона post к ней будет взят еще параметр p.pk это как цифра для ссылки, но она берется из идентификатора записи в БД.
#Мы в html прописали следующее { p.get_absolute_url }, тут p это объект класса Home из файла models.py, и у него есть функция get_absolute_url, мы ее вызываем каждый раз, и она также возвращает идентификатор, получается тоже самое что и выше но вроде как получше, этот подход лучше использовать, но его можно юзать только тогда когда ссылки связаны с нашей БД, если это просто какой-то список, то нужно использовать тег url. Теги в шаблонизаторе пишутся в значках %, а переменные пишутся в дополнительных фигурных скобках
#стандартная админ панель от джанго обращается к такому же методу для построения ссылок

#9. Создание связей между моделями через класс ForeignKey | Django уроки
# сделаем отдельную таблицу для категорий, то есть для каждой строки в основной таблицы будет еще категория, но в отдельной таблице, и при редактировании категории будет сразу редачиться все строки в основной таблице, это удобно. 
#для начала нужно определить cat_id - это ид категории, и он будет являться внешним ключом и будет связана с полем id в таблице категории
# в джанго есть 3 специальных класса для организации связей:
# ForeignKey - для связей Many to One (один ко многим или многие к одному, или поля отношений)
# ManyToManyField - для связей Many to Many (многие ко многим), подходит для определения тегов
# OneToOneField - для связей One to One (один к одному)
# будем использовать класс ForeignKey
# Конструкция: ForeignKey(<ссылка на первичную модель>, on_delete=<ограничения при удалении>)
# ссылка на первичную модель в нашем случае это таблица категория
# параметр on_delete определяет ограничения удаления записей из первичной модели, в нашем случае category. То есть в основной таблице будет ссылка на какую-то рубрику, например на таблицу с категорией, и если эта таблица то есть рубрика удаляется, то нгужно решить что делать с записями из основной таблицы которые ссылаются на таблицу с категориями. Ограничение при удалении которое мы записываем в on_delete можно определить с помощью функций(в нашем случае первичная модель это category и вторичная модель это Home):
# models.CASCADE – при удалении записи из первичной модели (у нас это таблица Category) происходит удаление всех записей из вторичной модели (Women), связанных с удаляемой категорией;
# models.PROTECT – запрещает удаление записи из первичной модели, если она используется во вторичной (выдает исключение);
# models.SET_NULL – при удалении записи первичной модели устанавливает значение foreign key в NULL у соответствующих записей вторичной модели;
# models.SET_DEFAULT – то же самое, что и SET_NULL, только вместо значения NULL устанавливает значение по умолчанию, которое должно быть определено через класс ForeignKey;
# models.SET() – то же самое, только устанавливает пользовательское значение;
# models.DO_NOTHING – удаление записи в первичной модели не вызывает никаких действий у вторичных моделей.

#далее идем в файл models.py, так как модели там прописываются

#10. Начинаем работу с админ-панелью | Django уроки
# Админ панель встроена в фреймворке джанго
#Чтобы зайти в админ панель нужно набрать домен нашего сайта и дописать admin - http://127.0.0.1:8000/admin/
#админка по умолчанию на англ языке. Ее можно русифицировать. В переменной LANGUAGE_CODE файла settings который находится в папке с проектом нужно присвоить ru. Теперь весь фреймворк будет русифицирован. 
# С помощью встроенной админки можно решать практически все типовые задачи, которые нам могут потребоваться. Это и создание пользователей с разными полномочиями (ролями), отображение всех наших приложений, добавление, удаление и изменение записей и так далее. Она подойдет для большинства сайтов так, что создавать свою админ-панель в Django попросту нет необходимости.
#при входе нужно ввести логин и пароль пользователя. Нужно для этого создать суперпользователя. Чтобы создать суперпользователя нужно через cmd в каталоге проекта прописать команду: 
# python manage.py createsuperuser
# Далее нужно придумать ввести логин, почту, пароль и тд для регистрации. Для учебного проекта введем все данные рандомно.
#я ввел пользователь ivan, почта ivan@pochta.ru, пароль 1234
#пароль конечно лучше задавать надежный, но пока надежный пароль не нужен
#в админке будет 2 приложения по умолчанию группы и пользователи, можно создавать пользователей и группы. Но нет нашенго приложения home. Его надо зерагать. Перейдем в файл admin в папке с приложением. 

#11. Пользовательские теги шаблонов | Django уроки!!!!!!!!!!!
#ранее мы создавали в файле views 2 функции с одинаковыми действиями. 
#можно убрать это дублирование на примере пользовательских тегов
# simple tags - простые теги
# inclusion tags - включающие теги
#создадим простой тег, который будет загружать рубрики и испоьзовать в шаблоне. Для этого нужно создать папку с названием teplatetags в папке с приложением. Также там нужно создать файл пакета питона. Также там надо создать файл с тегами питона, можно его назвать по названию приложения и tags. Переходим далее в этот файл. 


#12. Добавляем слаги (slug) к URL-адресам | Django уроки
 # slug – это уникальный фрагмент URL-адреса, ассоциированный с конкретной записью и, обычно, состоит из набора маленьких латинских букв, цифр, символов подчеркивания и дефиса.
# Здесь slug – это последние символы, по которым и выбирается данная страница из БД. Использование слагов – рекомендуемая практика в веб-программировании. Такие страницы лучше ранжируются поисковыми системами и понятнее конечному пользователю.
#идем в файл views.py из папки с приложением. БУдет модифицировать функцию show_post.
#остановился на 12 уроке 6 мин в видео




