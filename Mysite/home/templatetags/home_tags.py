from django import template
from home.models import *

register = template.Library()#создали класс для регистрации библиотеки тегов


# @register.simple_tag()#тег для простой функции. Теперь его можно юзать в html шаблонах приложения. Далее идем в base.html и добавим туда наш модуль с функциями тегов
# def get_categories():
# 	return Category.objects.all()#это для возвращения всех записей.

#далее нужно превратить эту функцию в тег. Для этого можно прописать декоратор @register.simple_tag()

@register.simple_tag(name="getcats")#можно прописать в декорате имя и тогда можно будет по этому имени обращаться вместо get_categories в шаблоне html
def get_categories(filter=None):
    if not filter:
        return Category.objects.all()
    else:
        return Category.objects.filter(pk=filter)#тут мы возвращаем коллекцию данных


#далее в файле base.html пропишем тег как шаблон {% get_categories %}. Если его просто прописать то там будет выведен наш список вот акт: <QuerySet [<Category: Частные дома>, <Category: Многоэтажки>]>
#но его можно перебрать в цикле в шаблонизаторе. Просто так подставит нельзя, так как это не переменная а тег. Нужно сделать ссылку на этот тег, то есть переменную создать, это нужно сделать в шаблонизаторе {% get_categories as categories %}. И теперь ее можно перебрать в цикле. Ничего не изменится, но теперь там будет тег. И в файле views можно убрать запрос cats = Category.objects.all(), это sql запрос всех данных таблицы. Вместо него это делает тег, который мы сделали.

# Второй тип пользовательских тегов – включающий тег, позволяет дополнительно формировать свой собственный шаблон на основе некоторых данных и возвращать фрагмент HTML-страницы. Давайте посмотрим как он формируется и используется в шаблонах.


@register.inclusion_tag('home/list_categories.html')#данные которые возвращает функция будут передаватьяс шаблону list_categories.html. Мы его также создадим. Шаблон будет возвращаться этим тегом
def show_categories(sort=None, cat_selected=0):#имя тега будет show_categories
    if not sort:#если сортировки нет, то просто все выводится. 
        cats = Category.objects.all()
    else:
        cats = Category.objects.order_by(sort)#если есть то передается сортировка, и сортируется по указанному полю.
 
    return {"cats": cats, "cat_selected": cat_selected}#второй параметр для этого шаблона list_categories

#создадим отдельный файл list_categories.html и скопируем туда цикл из base.html и в base.html его закоментируем и вместо него напишем тег {% show_categories %}. ТО есть этот тег возвращает код который прописали в шаблоне list_categories.html

#также можно фильтры делать в простых тегах. Их нужно прописать в параметрах функции и далее с ними работать в самой функции и потом также можно применять их в шаблонах. В шаблоне можно передавать параметры через название параметра и присвоение значения или просто цифру написать {% getcats 2 %}
#в шаблонах лучше передавать значения параметров через присвоение для названий параметров, а не просто список значений




